#!/usr/bin/env zsh

tool="$1"

if [ -z "$tool" ]; then
  echo "Usage: fast-asdf-version [tool]"
  exit 1
fi

# Make sure ASDF is active.
[[ -z "$ASDF_DIR" ]] && exit 0

legacy_version_files__crystal=( .crystal-version )
legacy_version_files__elixir=( .exenv-version )
legacy_version_files__ruby=( Gemfile .ruby-version )
legacy_version_files__nodejs=( .node-version )

tool_version=

# If we're not in the home directory or a home subdirectory, we should default
# to whatever the user's defaults are
if [[ ! $PWD =~ $HOME ]]; then
  if [[ -f "$HOME/.tool-versions" ]]; then
    tool_version=$(cat $HOME/.tool-versions | awk -v tool=$tool '$1 == tool { print $2 }')
    echo $tool_version
    exit 0
  fi

  # Otherwise, check for any of the legacy version files we've defined for the tool
  for file in $(eval echo \$legacy_version_files__$tool); do
    if [[ -f "$HOME/$file" ]]; then
      tool_version=$($HOME/.asdf/plugins/$tool/bin/parse-legacy-file $HOME/$file)
      break
    fi
  done

  echo $tool_version
  exit 0
fi

# Traverse up directories until we find a .tool-versions file, legacy file,
# or hit the $HOME directory.
while [[ $PWD =~ $HOME ]]; do
  # If we've found a .tool-versions file, parse it and break.
  if [[ -f "$PWD/.tool-versions" ]]; then
    tool_version=$(cat $PWD/.tool-versions | awk -v tool=$tool '$1 == tool { print $2 }')

    if [[ -n "$tool_version" ]]; then
      break
    fi
  fi

  # Otherwise, check for any of the legacy version files we've defined for the tool
  for file in $(eval echo \$legacy_version_files__$tool); do
    if [[ -f "$PWD/$file" ]]; then
      tool_version=$($HOME/.asdf/plugins/$tool/bin/parse-legacy-file $PWD/$file)

      if [[ -n "$tool_version" ]]; then
        break 2
      fi
    fi
  done

  cd ..
done

echo $tool_version
